services:
  #-----------------------------------------
  # BANCOS DE DADOS E CACHE
  #-----------------------------------------
  postgres:
    image: postgres:15
    container_name: postgres_db
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=admin
      - POSTGRES_DB=ecommerce
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init:/docker-entrypoint-initdb.d
    networks:
      - ecommerce-network

  redis:
    image: redis:7-alpine
    container_name: redis_cache
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ecommerce-network

  #-----------------------------------------
  # MESSAGE BROKER
  #-----------------------------------------
  rabbitmq:
    image: rabbitmq:3.12-management
    container_name: rabbitmq_broker
    ports:
      - "5672:5672" # Porta para as aplicações
      - "15672:15672" # Porta para a UI de gerenciamento
    networks:
      - ecommerce-network

  #-----------------------------------------
  # SEGURANÇA E IDENTIDADE
  #-----------------------------------------
  keycloak:
    image: quay.io/keycloak/keycloak:25.0
    container_name: keycloak_iam
    command: start-dev
    environment:
      - KEYCLOAK_ADMIN=admin
      - KEYCLOAK_ADMIN_PASSWORD=admin
      - KC_DB=postgres
      - KC_DB_URL_HOST=postgres
      - KC_DB_URL_DATABASE=keycloak
      - KC_DB_URL_PORT=5432
      - KC_DB_USERNAME=admin
      - KC_DB_PASSWORD=admin
      - KC_DB_SCHEMA=public
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - ecommerce-network

  #-----------------------------------------
  # API GATEWAY
  #-----------------------------------------
  kong-migrations:
    image: kong:3.6 # <-- Imagem Oficial
    command: "kong migrations bootstrap"
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=admin
      - KONG_PG_PASSWORD=admin
      - KONG_PG_DATABASE=kong
    depends_on:
      - postgres
    networks:
      - ecommerce-network
    restart: on-failure

  kong-gateway:
    image: kong:3.6 # <-- Imagem Oficial
    container_name: kong_gateway
    environment:
      - KONG_DATABASE=postgres
      - KONG_PG_HOST=postgres
      - KONG_PG_USER=admin
      - KONG_PG_PASSWORD=admin
      - KONG_PG_DATABASE=kong
      # NÃO PRECISAMOS MAIS DA VARIÁVEL KONG_PLUGINS AQUI
      - KONG_ADMIN_LISTEN=0.0.0.0:8001
      - KONG_ADMIN_GUI_URL=http://localhost:8002
      - KONG_ADMIN_GUI_API_URL=http://localhost:8001
    ports:
      - "8000:8000"
      - "8001:8001"
      - "8002:8002"
    depends_on:
      - kong-migrations
    networks:
      - ecommerce-network
    healthcheck:
      test: [ "CMD", "kong", "health" ]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure

  #-----------------------------------------
  # STACK DE OBSERVABILIDADE
  #-----------------------------------------
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - ecommerce-network

  #-----------------------------------------
  # MICROSSERVIÇOS
  #-----------------------------------------
  orders-service:
    ports:
        - "3001:3001"
    container_name: orders_service
    build:
      context: .
      dockerfile: apps/orders/Dockerfile # <-- Aponta para o Dockerfile específico
    env_file: [ .env ]
    environment:
      - DB_HOST=postgres
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    depends_on: [ postgres, rabbitmq ]
    networks: [ ecommerce-network ]

  #-----------------------------------------
  # OBSERVABILIDADE
  #-----------------------------------------
  grafana:
    image: grafana/grafana-oss:10.1.5
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - ecommerce-network

#-----------------------------------------
# VOLUMES E REDES
#-----------------------------------------
volumes:
  postgres-data:
  redis-data:


networks:
  ecommerce-network:
    driver: bridge
